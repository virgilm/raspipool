sensor:
  - platform: template
    sensors:
      pump_state:
        friendly_name: "Pump State"
        value_template: >-
          {% if is_state('switch.pump', 'on') %}
             {% if is_state('switch.turbo', 'on') %}
                high
             {% else %}
                low
             {% endif %}
          {% else %}
             None
          {% endif %}

      remain_cycles:
        friendly_name: "Remain cycles"
        value_template: >-
          {% set hours = states('sensor.cycle_pool') | regex_replace(":[0-9]*$","") %}
          {% set mins = states('sensor.cycle_pool') | regex_replace("^[0-9]*:","") %}
          {% set nextcycle = (hours|int + mins|int/60) %}
          {{(states('input_number.notify_cycles')|float - (states('sensor.cummulated_flow_low')|float + states('sensor.cummulated_flow_high')|float * 5) / (state_attr('input_datetime.recirculation','hour')+ state_attr('input_datetime.recirculation','minute')|float/60) )|round(1)}}
        unit_of_measurement: ''
        entity_id: 
        - input_number.notify_cycles
        - sensor.cummulated_flow_low
        - sensor.cummulated_flow_high
  
  - platform: history_stats
    name: cummulated_flow_low
    entity_id: sensor.pump_state
    state: 'low'
    type: time
    start: "{{ state_attr('input_datetime.cummulated_flow_start','timestamp') }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: cummulated_flow_high
    entity_id: sensor.pump_state
    state: 'high'
    type: time
    start: "{{ state_attr('input_datetime.cummulated_flow_start','timestamp') }}"
    end: "{{ now() }}"

input_datetime:
  cummulated_flow_start:
    name: Cummulated Flow Start
    has_date: true
    has_time: true
    icon: mdi:timer

input_number:
  notify_cycles:
    name: Notify cycles flow
    icon: mdi:timer
    min: 0
    max: 100
    step: 5

